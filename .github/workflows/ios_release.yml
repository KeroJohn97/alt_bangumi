name: IOS RELEASE
on:
    # Enable manual run
    workflow_dispatch:

permissions: write-all

jobs:
    build:
        name: GET alt bangumi app version from pubspec.yaml
        runs-on: ubuntu-latest
        outputs: 
          version: ${{ steps.get_version.outputs.version }}
        steps:
          - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    
          - name: GET version from pubspec.yaml
            id: get_version
            run: |
              VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' ./pubspec.yaml)
              echo "version=v$VERSION" >> $GITHUB_OUTPUT

    deploy:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

            - name: SELECT Xcode version
              run: sudo xcode-select -s '/Applications/Xcode_11.3.app/Contents/Developer'
            - name: BUNDLE install
              run: cd ./ios && bundle install
        
            - name: CLONE Flutter repository (v2.11.0)
              uses: subosito/flutter-action@cc97e1648fff6ca5cc647fa67f47e70f7895510b # v2.11.0
              with:
                 flutter-version: '3.16.4'
                 cache: true

            - name: INSTALL tools
              run: |
                 flutter pub get
                 cd ./ios && pod install

            - name: INSTALL the Apple certificate and provisioning profile
              env:
                 BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
                 P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
                 BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
                 KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
              run: |
                 # create variables
                 CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
                 PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
                 KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
         
                 # import certificate and provisioning profile from secrets
                 echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
                 echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
         
                 # create temporary keychain
                 security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                 security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                 security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
         
                 # import certificate to keychain
                 security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                 security list-keychain -d user -s $KEYCHAIN_PATH
         
                 # apply provisioning profile
                 mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                 cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
            - name: SETUP SSH Keys and known_hosts for fastlane match
              run: |
                 SSH_PATH="$HOME/.ssh"
                 mkdir -p "$SSH_PATH"
                 touch "$SSH_PATH/known_hosts"
                 echo "$PRIVATE_KEY" > "$SSH_PATH/id_rsa"
                 chmod 700 "$SSH_PATH"
                 ssh-keyscan github.com >> ~/.ssh/known_hosts
                 chmod 600 "$SSH_PATH/known_hosts"
                 chmod 600 "$SSH_PATH/id_rsa"
                 eval $(ssh-agent)
                 ssh-add "$SSH_PATH/id_rsa"
              env:
                 PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: DEPLOY to TestFlight
              run: |
                 # TODO
            
            - name: CLEANUP keychain and provisioning profile
              if: ${{ always() }}
              run: |
                 security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
                 rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision